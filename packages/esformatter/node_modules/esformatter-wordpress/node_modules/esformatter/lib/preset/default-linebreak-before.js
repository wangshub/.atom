module.exports = {
  "lineBreak": {
    "before": {
      "ArrayPatternClosing": 0,
      "ArrayPatternComma": 0,
      "ArrayPatternOpening": 0,
      "ArrowFunctionExpressionArrow": 0,
      "ArrowFunctionExpressionClosingBrace": ">=1",
      "ArrowFunctionExpressionOpeningBrace": 0,
      "AssignmentExpression": ">=1",
      "AssignmentOperator": 0,
      "AssignmentPattern": 0,
      "BlockStatementClosingBrace": ">=1",
      "BlockStatementOpeningBrace": ">=1",
      "BreakKeyword": ">=1",
      "CallExpression": -1,
      "CallExpressionClosingParentheses": -1,
      "CallExpressionOpeningParentheses": 0,
      "CatchClosingBrace": ">=1",
      "CatchKeyword": 0,
      "CatchOpeningBrace": 0,
      "ClassClosingBrace": ">=1",
      "ClassDeclaration": ">=1",
      "ClassExpression": ">=1",
      "ClassExtendsKeyword": 0,
      "ClassKeyword": -1,
      "ClassOpeningBrace": 0,
      "ConditionalExpression": ">=1",
      "DeleteOperator": ">=1",
      "DoWhileStatement": ">=1",
      "DoWhileStatementClosingBrace": ">=1",
      "DoWhileStatementOpeningBrace": 0,
      "ElseIfStatement": 0,
      "ElseIfStatementClosingBrace": ">=1",
      "ElseIfStatementOpeningBrace": 0,
      "ElseStatement": 0,
      "ElseStatementClosingBrace": ">=1",
      "ElseStatementOpeningBrace": 0,
      "EmptyStatement": -1,
      "EndOfFile": -1,
      "ExportAllDeclaration": ">=1",
      "ExportDefaultDeclaration": ">=1",
      "ExportNamedDeclaration": ">=1",
      "FinallyClosingBrace": ">=1",
      "FinallyKeyword": -1,
      "FinallyOpeningBrace": 0,
      "ForInStatement": ">=1",
      "ForInStatementClosingBrace": ">=1",
      "ForInStatementExpressionClosing": 0,
      "ForInStatementExpressionOpening": 0,
      "ForInStatementOpeningBrace": 0,
      "ForOfStatement": ">=1",
      "ForOfStatementClosingBrace": ">=1",
      "ForOfStatementExpressionClosing": 0,
      "ForOfStatementExpressionOpening": 0,
      "ForOfStatementOpeningBrace": 0,
      "ForStatement": ">=1",
      "ForStatementClosingBrace": ">=1",
      "ForStatementExpressionClosing": "<2",
      "ForStatementExpressionOpening": 0,
      "ForStatementOpeningBrace": 0,
      "FunctionDeclaration": ">=1",
      "FunctionDeclarationClosingBrace": ">=1",
      "FunctionDeclarationOpeningBrace": 0,
      "FunctionExpression": -1,
      "FunctionExpressionClosingBrace": ">=1",
      "FunctionExpressionOpeningBrace": 0,
      "IIFEClosingParentheses": 0,
      "IfStatement": ">=1",
      "IfStatementClosingBrace": ">=1",
      "IfStatementOpeningBrace": 0,
      "LogicalExpression": -1,
      "MemberExpressionClosing": "<2",
      "MemberExpressionOpening": 0,
      "MemberExpressionPeriod": -1,
      "MethodDefinition": ">=1",
      "MethodDefinitionClosingBrace": ">=1",
      "MethodDefinitionOpeningBrace": 0,
      "ModuleSpecifierClosingBrace": 0,
      "ModuleSpecifierComma": 0,
      "ModuleSpecifierOpeningBrace": 0,
      "ObjectExpressionClosingBrace": ">=1",
      "ObjectPatternClosingBrace": 0,
      "ObjectPatternComma": 0,
      "ObjectPatternOpeningBrace": 0,
      "Property": ">=1",
      "PropertyValue": 0,
      "ReturnStatement": -1,
      "SwitchCaseBlockEnd": ">=1",
      "SwitchCaseBlockStart": 0,
      "SwitchCaseColon": 0,
      "SwitchClosingBrace": ">=1",
      "SwitchOpeningBrace": 0,
      "ThisExpression": -1,
      "ThrowStatement": ">=1",
      "TryClosingBrace": ">=1",
      "TryKeyword": -1,
      "TryOpeningBrace": 0,
      "VariableDeclaration": ">=1",
      "VariableDeclarationSemiColon": 0,
      "VariableDeclarationWithoutInit": ">=1",
      "VariableName": ">=1",
      "VariableValue": 0,
      "WhileStatement": ">=1",
      "WhileStatementClosingBrace": ">=1",
      "WhileStatementOpeningBrace": 0
    }
  }
};
