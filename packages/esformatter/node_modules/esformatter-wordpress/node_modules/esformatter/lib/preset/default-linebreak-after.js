module.exports = {
  "lineBreak": {
    "after": {
      "ArrayPatternClosing": 0,
      "ArrayPatternComma": 0,
      "ArrayPatternOpening": 0,
      "ArrowFunctionExpressionArrow": 0,
      "ArrowFunctionExpressionClosingBrace": -1,
      "ArrowFunctionExpressionOpeningBrace": ">=1",
      "AssignmentExpression": ">=1",
      "AssignmentOperator": 0,
      "AssignmentPattern": 0,
      "BlockStatementClosingBrace": ">=1",
      "BlockStatementOpeningBrace": ">=1",
      "BreakKeyword": -1,
      "CallExpression": -1,
      "CallExpressionClosingParentheses": -1,
      "CallExpressionOpeningParentheses": -1,
      "CatchClosingBrace": ">=0",
      "CatchKeyword": 0,
      "CatchOpeningBrace": ">=1",
      "ClassClosingBrace": ">=1",
      "ClassDeclaration": ">=1",
      "ClassExpression": ">=1",
      "ClassExtendsKeyword": 0,
      "ClassKeyword": 0,
      "ClassOpeningBrace": ">=1",
      "ConditionalExpression": ">=1",
      "DeleteOperator": ">=1",
      "DoWhileStatement": ">=1",
      "DoWhileStatementClosingBrace": 0,
      "DoWhileStatementOpeningBrace": ">=1",
      "ElseIfStatement": ">=1",
      "ElseIfStatementClosingBrace": ">=1",
      "ElseIfStatementOpeningBrace": ">=1",
      "ElseStatement": ">=1",
      "ElseStatementClosingBrace": ">=1",
      "ElseStatementOpeningBrace": ">=1",
      "EmptyStatement": -1,
      "FinallyClosingBrace": ">=1",
      "FinallyKeyword": -1,
      "FinallyOpeningBrace": ">=1",
      "ForInStatement": ">=1",
      "ForInStatementClosingBrace": ">=1",
      "ForInStatementExpressionClosing": -1,
      "ForInStatementExpressionOpening": "<2",
      "ForInStatementOpeningBrace": ">=1",
      "ForOfStatement": ">=1",
      "ForOfStatementClosingBrace": ">=1",
      "ForOfStatementExpressionClosing": -1,
      "ForOfStatementExpressionOpening": "<2",
      "ForOfStatementOpeningBrace": ">=1",
      "ForStatement": ">=1",
      "ForStatementClosingBrace": ">=1",
      "ForStatementExpressionClosing": -1,
      "ForStatementExpressionOpening": "<2",
      "ForStatementOpeningBrace": ">=1",
      "FunctionDeclaration": ">=1",
      "FunctionDeclarationClosingBrace": ">=1",
      "FunctionDeclarationOpeningBrace": ">=1",
      "FunctionExpression": ">=1",
      "FunctionExpressionClosingBrace": -1,
      "FunctionExpressionOpeningBrace": ">=1",
      "IIFEOpeningParentheses": 0,
      "IfStatement": ">=1",
      "IfStatementClosingBrace": ">=1",
      "IfStatementOpeningBrace": ">=1",
      "LogicalExpression": -1,
      "MemberExpressionClosing": "<2",
      "MemberExpressionOpening": "<2",
      "MemberExpressionPeriod": 0,
      "MethodDefinitionClosingBrace": ">=1",
      "MethodDefinitionOpeningBrace": ">=1",
      "ModuleSpecifierClosingBrace": 0,
      "ModuleSpecifierComma": 0,
      "ModuleSpecifierOpeningBrace": 0,
      "ObjectExpressionOpeningBrace": ">=1",
      "ObjectPatternClosingBrace": 0,
      "ObjectPatternComma": 0,
      "ObjectPatternOpeningBrace": 0,
      "Property": 0,
      "PropertyName": 0,
      "ReturnStatement": -1,
      "SwitchCaseBlockEnd": 1,
      "SwitchCaseBlockStart": ">=1",
      "SwitchCaseColon": ">=1",
      "SwitchClosingBrace": ">=1",
      "SwitchOpeningBrace": ">=1",
      "ThisExpression": 0,
      "ThrowStatement": ">=1",
      "TryClosingBrace": 0,
      "TryKeyword": -1,
      "TryOpeningBrace": ">=1",
      "VariableDeclaration": ">=1",
      "VariableDeclarationSemiColon": ">=1",
      "VariableName": 0,
      "VariableValue": -1,
      "WhileStatement": ">=1",
      "WhileStatementClosingBrace": ">=1",
      "WhileStatementOpeningBrace": ">=1"
    }
  }
};
