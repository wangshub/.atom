module.exports = {
  "whiteSpace": {
    "after": {
      "ArgumentComma": 1,
      "ArgumentList": 0,
      "ArrayExpressionClosing": 0,
      "ArrayExpressionComma": 1,
      "ArrayExpressionOpening": 0,
      "ArrayPatternClosing": 1,
      "ArrayPatternComma": 1,
      "ArrayPatternOpening": 0,
      "ArrowFunctionExpressionArrow": 1,
      "ArrowFunctionExpressionClosingBrace": 0,
      "ArrowFunctionExpressionOpeningBrace": 0,
      "AssignmentOperator": 1,
      "AssignmentPattern": 1,
      "BinaryExpression": 0,
      "BinaryExpressionOperator": 1,
      "BlockComment": 1,
      "BlockStatementClosingBrace": 1,
      "BlockStatementOpeningBrace": 1,
      "CallExpression": -1,
      "CallExpressionClosingParentheses": -1,
      "CallExpressionOpeningParentheses": -1,
      "CatchClosingBrace": 1,
      "CatchKeyword": 1,
      "CatchOpeningBrace": 1,
      "CatchParameterList": 0,
      "ClassClosingBrace": 1,
      "ClassOpeningBrace": 1,
      "CommaOperator": 1,
      "ConditionalExpressionConsequent": 1,
      "ConditionalExpressionTest": 1,
      "DoWhileStatementBody": 1,
      "DoWhileStatementClosingBrace": 1,
      "DoWhileStatementOpeningBrace": 1,
      "ElseIfStatementClosingBrace": 1,
      "ElseIfStatementOpeningBrace": 1,
      "ElseStatementClosingBrace": 1,
      "ElseStatementOpeningBrace": 1,
      "EmptyStatement": 0,
      "ExpressionOpeningParentheses": 0,
      "FinallyClosingBrace": 1,
      "FinallyKeyword": -1,
      "FinallyOpeningBrace": 1,
      "ForInStatement": 1,
      "ForInStatementClosingBrace": 1,
      "ForInStatementExpressionClosing": 1,
      "ForInStatementExpressionOpening": 0,
      "ForInStatementOpeningBrace": 1,
      "ForOfStatement": 1,
      "ForOfStatementClosingBrace": 1,
      "ForOfStatementExpressionClosing": 1,
      "ForOfStatementExpressionOpening": 0,
      "ForOfStatementOpeningBrace": 1,
      "ForStatement": 1,
      "ForStatementClosingBrace": 1,
      "ForStatementExpressionClosing": 1,
      "ForStatementExpressionOpening": 0,
      "ForStatementOpeningBrace": 1,
      "ForStatementSemicolon": 1,
      "FunctionDeclarationClosingBrace": 1,
      "FunctionDeclarationOpeningBrace": 1,
      "FunctionExpressionClosingBrace": 0,
      "FunctionExpressionOpeningBrace": 1,
      "FunctionName": 0,
      "FunctionReservedWord": 0,
      "IIFEOpeningParentheses": 0,
      "IfStatementClosingBrace": 1,
      "IfStatementConditionalClosing": 1,
      "IfStatementConditionalOpening": 0,
      "IfStatementOpeningBrace": 1,
      "LogicalExpressionOperator": 1,
      "MemberExpressionClosing": 0,
      "MemberExpressionOpening": 0,
      "MemberExpressionPeriod": 0,
      "MethodDefinitionName": 0,
      "MethodName": 0,
      "ModuleSpecifierClosingBrace": 0,
      "ModuleSpecifierComma": 1,
      "ModuleSpecifierOpeningBrace": 1,
      "ObjectExpressionClosingBrace": 0,
      "ObjectExpressionOpeningBrace": 0,
      "ObjectPatternClosingBrace": 1,
      "ObjectPatternComma": 1,
      "ObjectPatternOpeningBrace": 0,
      "ParameterComma": 1,
      "ParameterList": 0,
      "PropertyName": 0,
      "PropertyValue": 0,
      "SwitchDiscriminantClosing": 1,
      "SwitchDiscriminantOpening": 0,
      "ThrowKeyword": 1,
      "TryClosingBrace": 1,
      "TryKeyword": -1,
      "TryOpeningBrace": 1,
      "UnaryExpressionOperator": 0,
      "UpdateExpressionOperator": 0,
      "VariableDeclarationSemiColon": 0,
      "VariableName": 1,
      "VariableValue": 0,
      "WhileStatementClosingBrace": 1,
      "WhileStatementConditionalClosing": 1,
      "WhileStatementConditionalOpening": 0,
      "WhileStatementOpeningBrace": 1
    }
  }
};
